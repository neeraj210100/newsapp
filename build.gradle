plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'application'  // Add application plugin
}

group = 'org'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'mysql:mysql-connector-java:8.0.33'
	implementation 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'
	
	// For working with JSON
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	
	// Google Cloud dependencies
	implementation platform('com.google.cloud:libraries-bom:26.34.0')
	implementation 'com.google.cloud:google-cloud-translate'
	implementation 'com.google.auth:google-auth-library-oauth2-http'

	implementation 'com.google.cloud.sql:mysql-socket-factory-connector-j-8:1.16.0'
    implementation("org.springframework.cloud:spring-cloud-gcp-starter-sql-mysql:1.2.8.RELEASE")
    implementation 'com.google.cloud:google-cloud-storage'
	
	// Swagger/OpenAPI dependencies
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	
	// Jsoup for web scraping
    implementation 'org.jsoup:jsoup:1.18.3' // Use the latest stable version
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

application {
    mainClass = 'org.demo.DemoApplication'
}

// Debug configuration
bootRun {
    jvmArgs = [
        '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005'
    ]
}

// Alternative debug task
task debug(type: JavaExec) {
    group = 'application'
    description = 'Run the application in debug mode'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.demo.DemoApplication'
    jvmArgs = [
        '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    ]
}


// Frontend build tasks
def frontendDir = "${projectDir}/frontend"
def frontendBuildDir = "${frontendDir}/build"
def staticResourcesDir = "${projectDir}/src/main/resources/static"

// Task to install npm dependencies
task npmInstall(type: Exec) {
    description = 'Install npm dependencies for React frontend'
    workingDir frontendDir
    
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'npm', 'install'
    } else {
        commandLine 'npm', 'install'
    }
}

// Task to build React frontend
task npmBuild(type: Exec) {
    description = 'Build React frontend for production'
    dependsOn npmInstall
    workingDir frontendDir
    
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'npm', 'run', 'build'
    } else {
        commandLine 'npm', 'run', 'build'
    }
}

// Task to copy frontend build to static resources
task copyFrontend(type: Copy) {
    description = 'Copy React build to Spring Boot static resources'
    dependsOn npmBuild
    from frontendBuildDir
    into "${staticResourcesDir}/app"
}

// Task to clean frontend build
task cleanFrontend(type: Delete) {
    description = 'Clean frontend build artifacts'
    delete frontendBuildDir
    delete "${staticResourcesDir}/app"
}

// Optional: Add frontend build to bootJar only when buildFrontend property is set
// Usage: ./gradlew bootJar -PbuildFrontend
if (project.hasProperty('buildFrontend')) {
    bootJar {
        dependsOn copyFrontend
    }
}

// Add clean task dependency
clean.dependsOn cleanFrontend
